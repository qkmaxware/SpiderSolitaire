@using Spider.Data
@using Qkmaxware.Games.Data;

@if (Playing != null) {

<div class="w3-row-padding" style="margin-bottom: 48px;">
    <div class="w3-col">
        @if (Playing.Stack.Count > 0) {
        <button class="w3-button w3-flat w3-hover-greyscale" @onclick=deal style="overflow: visible; position: relative; padding: 0; cursor: pointer;">
            <img style="user-select: none; pointer-events: none;" src="@theme.GetBackImageUrl()">
            <img style="position: absolute; left: 8px; top: 8px; user-select: none; pointer-events: none;" src="@theme.GetBackImageUrl()">
            <img style="position: absolute; left: 16px; top: 16px; user-select: none; pointer-events: none;" src="@theme.GetBackImageUrl()">
        </button>
        } else {
            <img class="" src="images/Cards/cardSlot.png">
        }
    </div>
    <div class="w3-col">&nbsp;</div>
    @for(var i = 0; i < 8; i++) {
        var score = Playing.GetScorePile(i);
        <div class="w3-col column">
            @if (ReferenceEquals(score, null) || ReferenceEquals(score.Top, null)) {
                <img class="" src="images/Cards/cardSlot.png">
            } else {
                <img style="" src="@(score.Top.Card)">
            }
        </div>
    }
</div>

<div class="w3-row-padding">
    @foreach (var pile in Playing.Piles) {
        var myPile = pile;
        <div class="w3-col column @(hidden.Contains(myPile) ? hiddenCss : noneCss)">
            <button class="w3-button w3-flat hoverable" style="padding: 0;" @onclick=@(() => select(myPile, null))>
                <img class="" src="images/Cards/cardSlot.png">
            </button>
            @for(var i = 0; i < pile.CardCount; i++) {
                var self = pile[i];
                var path = GetImage(self);
                <button class="w3-button w3-flat hoverable card @(selected.Contains(self) ? selectedCss : noneCss)" @onclick=@(() => select(myPile, self))>
                    <img style="user-select: none; pointer-events: none;" src="@(path)">
                </button>
            }
        </div>
    }
</div>

}

@code {
    [Parameter] public SpiderSolitaire? Playing {get; set;}

    private ITheme theme = new Red2Theme();

    private static readonly string noneCss = string.Empty;
    [Parameter] public Action? OnDeal {get; set;}
    [Parameter] public Action<Pile, FaceCard?>? OnClick {get; set;}

    private string GetImage(FaceCard card) {
        return theme.GetImageUrl(card);
    }


    private void deal() {
        OnDeal?.Invoke();
    }

    private void select(Pile pile, FaceCard? cardInPile) {
        this.OnClick?.Invoke(pile, cardInPile);
    }

    private static readonly string selectedCss = "selected";
    private HashSet<FaceCard> selected = new HashSet<FaceCard>();
    public bool HasSelection() => selected.Count != 0;
    public void Select(FaceCard card) {
        this.selected.Add(card);
    }
    public void Deselect(FaceCard card) {
        this.selected.Remove(card);
    }
    public void ClearSelection() {
        this.selected.Clear();
    }

    private static readonly string hiddenCss = "disabled";
    private HashSet<Pile> hidden = new HashSet<Pile>();
    public void ClearHiddenColumns() {
        hidden.Clear();
    }
    public void HideColumn(Pile pile) {
        this.hidden.Add(pile);
    }
}